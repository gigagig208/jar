# Разбор кода для работы с файлом TSKV и PostgreSQL

Этот код читает данные из файла в формате TSKV (Tab-Separated Key-Value) и загружает их в таблицу PostgreSQL. Давайте разберём его по частям:

## Основные компоненты кода

1. **Подключение к PostgreSQL**:
   ```python
   Connection = psycopg2.connect(user="univer", password="univer", host="localhost", port="5432", database='tskv')
   CurrentCursor = Connection.cursor()
   ```
   - Устанавливается соединение с базой данных PostgreSQL
   - Создаётся курсор для выполнения SQL-запросов

2. **Создание таблицы**:
   ```python
   sql_create_table = """
   CREATE TABLE punlic.tskv (
       address text,
       name_ru text,
       rating integer,
       rubrics text,
       text text
   );
   """
   CurrentCursor.execute(sql_create_table)
   Connection.commit()
   ```
   - Создаётся таблица с 5 колонками для хранения данных

3. **Чтение и обработка файла TSKV**:
   ```python
   with open("geo-reviews-dataset-2023.tskv", "r") as inp:
       for line in inp:
           line = line.replace("'", '"')
           arr = line.split("\t")
   ```
   - Файл открывается для чтения
   - Каждая строка обрабатывается (замена кавычек и разделение по табуляции)

4. **Извлечение данных**:
   ```python
   for j1 in range(0, 5):
       ss = arr[j2]
       a = ss[0:lth[j1]+1]
       if a == (th[j1]+'='):
           aa[j1] = ss[lth[j1]+1:]
           j2 += 1
       else:
           aa[j1] = ''
   ```
   - Данные извлекаются по ключам (address, name_ru, rating, rubrics, text)
   - Проверяется соответствие формата "ключ=значение"

5. **Очистка и подготовка данных**:
   ```python
   r = aa[2]
   c1 = r[-1]
   if c1 == '.': r = r[:-1]
   aa[0] = aa[0][0:99]  # обрезка до 100 символов
   aa[1] = aa[1][0:99]
   aa[3] = aa[3][0:99]
   aa[4] = aa[4][0:999]
   ```

6. **Вставка данных в БД**:
   ```python
   SQL = f"INSERT INTO public.tskv2(address, name_ru, rating, rubrics, text) VALUES ('{aa[0]}', '{aa[1]}', {r}, '{aa[3]}', '{aa[4]}');"
   CurrentCursor.execute(SQL)
   Connection.commit()
   ```

## Как разбирать подобные файлы

1. **Анализ формата файла**:
   - Определите структуру (TSKV, CSV, JSON и т.д.)
   - Посмотрите первые строки файла, чтобы понять формат полей

2. **Подготовка базы данных**:
   - Создайте таблицу с соответствующими колонками
   - Убедитесь, что типы данных соответствуют ожидаемым

3. **Обработка данных**:
   - Читайте файл построчно
   - Разбивайте строки на отдельные поля
   - Очищайте данные (удаляйте лишние символы, обрезайте до нужной длины)
   - Обрабатывайте особые случаи (пустые значения, неверные форматы)

4. **Вставка в БД**:
   - Формируйте SQL-запросы для вставки
   - Используйте параметризованные запросы для безопасности
   - Коммитите изменения

## Улучшения кода

1. **Использование параметризованных запросов**:
   ```python
   SQL = "INSERT INTO public.tskv2(address, name_ru, rating, rubrics, text) VALUES (%s, %s, %s, %s, %s);"
   CurrentCursor.execute(SQL, (aa[0], aa[1], r, aa[3], aa[4]))
   ```

2. **Пакетная вставка**:
   - Вставляйте данные пачками (по 100-1000 строк), а не построчно

3. **Обработка ошибок**:
   - Добавьте try-except для обработки возможных ошибок

4. **Логирование**:
   - Добавьте вывод прогресса обработки

Этот код демонстрирует типичный pipeline ETL (Extract-Transform-Load) для загрузки данных из текстового файла в базу данных.
